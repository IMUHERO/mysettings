
// Basics
:e filename ; Open filename for edition
:w  ; Save file
:q ; Exit Vim
:w! ; Write file and quit

// Search
/word ; Search word from top to bottom
?word ; Search word from bottom to top
/jo[ha]n ; Search john or joan
/\< the ; Search the, theatre or then
/the\> ; Search the or breathe
/\< the\> ; Search the
/\< |.\> ; Search all words of 4 letters
/\/ ; Search fred but not alfred or frederick
/fred\|joe ; Search fred or joe
/\<\d\d\d\d\> ; Search exactly 4 digits
/^\n\{3} ; Find 3 empty lines
:bufdo /searchstr/ ; Search in all open files
/\v^.+(^.*MUST BE.*$)@<!$ ; Search all lines not containing text 'MUST BE' in it. \v option set escaping opertators like + or ) not needed. @<! operator is negative look-behind
/^\(.*\)\n\1$ ; Search duplicated lines in text
<C-R> / ; Copy from search register, last searched term

// Replace
:%s/old/new/g ; Replace all occurences of old by new in file
:%s/old/new/gw ; Replace all occurences with confirmation
:2,35s/old/new/g ; Replace all occurences between lines 2 and 35
:5,$s/old/new/g ; Replace all occurences from line 5 to EOF
:%s/^/hello/g ; Replace the begining of each line by hello
:%s/$/Harry/g ; Replace the end of each line by Harry
:%s/onward/forward/gi ; Replace onward by forward, case unsensitive
:%s/ *$//g ; Delete all white spaces
:g/string/d ; Delete all lines containing string
:v/string/d ; Delete all lines containing which didn’t contain string
:s/Bill/Steve/ ; Replace the first occurence of Bill by Steve in current line
:s/Bill/Steve/g ; Replace Bill by Steve in current line
:%s/Bill/Steve/g ; Replace Bill by Steve in all the file
:%s/\r//g ; Delete DOS carriage returns (^M)
:%s/\r/\r/g ; Transform DOS carriage returns in returns
:%s#<[^>]\+>##g ; Delete HTML tags but keeps text
:%s/^\(.*\)\n\1$/\1/ ; Delete lines which appears twice
Ctrl+a ; Increment number under the cursor
Ctrl+x ; Decrement number under cursor
ggVGg? ; Change text to Rot13
:g/.*#.*/p ; Will print all lines containing # character
:% g/foo/s/bar/zzz/g ;for every line containing "foo" substitute all "bar" with "zzz."
:'a,'bg/foo/j ; to join any line containing the string foo to its subsequent line, if it lies between the lines between the 'a' and 'b' marks


// Case
Vu ; Lowercase line
VU ; Uppercase line
g~~ ; Invert case
vEU ; Switch word to uppercase
vE~ ; Modify word case
ggguG ; Set all text to lowercase
:set ignorecase ; Ignore case in searches
:set smartcase ; Ignore case in searches excepted if an uppercase letter is used
:%s/\<./\u&/g ; Sets first letter of each word to uppercase
:%s/\<./\l&/g ; Sets first letter of each word to lowercase
:%s/.*/\u& ; Sets first letter of each line to uppercase
:%s/.*/\l& ; Sets first letter of each line to lowercase

// Read/Write files
:1,10 w outfile ; Saves lines 1 to 10 in outfile
:1,10 w >> outfile ; Appends lines 1 to 10 to outfile
:r infile ; Read and Insert the content of infile
:23r infile ; Read and Insert the content of infile under line 23
:r! <cmd> ; read an aoutput of a command into the current Buffer


// File explorer
:e . ; Open integrated file explorer
:Sex ; Split window and open integrated file explorer
:browse e ; Graphical file explorer
:ls ; List buffers
:cd .. ; Move to parent directory
:args ; List files
:args *.php ; Open file list
:grep expression *.php ; Returns a list of .php files contening expression
gf ; Open file name under cursor

// Interact with Unix
:!pwd ; Execute the pwd unix command, then returns to Vi
!!pwd ; Execute the pwd unix command and insert output in file
:sh ; Temporary returns to Unix
$exit ; Retourns to Vi

// Alignment
:%!fmt ; Align all lines
!}fmt ; Align all lines at the current position
5!!fmt ; Align the next 5 lines

// Tabs
:tabnew ; Creates a new tab
gt ; Show next tab
:tabfirst ; Show first tab
:tablast ; Show last tab
:tabm n(position) ; Rearrange tabs
:tabdo %s/foo/bar/g ; Execute a command in all tabs
:tab ball ; Puts all open files in tabs

// Window spliting
:e filename ; Edit filename in current window
:split filename ; Split the window and open filename
ctrl-w up arrow ; Puts cursor in top window
ctrl-w ctrl-w ; Puts cursor in next window
ctrl-w_ ; Maximise current window
ctrl-w= ; Gives the same size to all windows
10 ctrl-w+ ; Add 10 lines to current window
:vsplit file ; Split window vertically
:sview file ; Same as :split in readonly mode
:hide ; Close current window
:­nly ; Close all windows, excepted current
:b 2 ; Open #2 in this window

// Auto-completion
Ctrl+n Ctrl+p (in insert mode) ; Complete word
Ctrl+x Ctrl+l ; Complete line
:set dictionary=dict ; Define dict as a dictionnary
Ctrl+x Ctrl+k ; Complete with dictionnary

// Marks
mk ; Marks current position as k
˜k ; Moves cursor to mark k
d™k ; Delete all until mark k

// Abbreviations
:ab mail mail@provider.org ; Define mail as abbreviation of mail@provider.org

// Text indent
:set autoindent ; Turn on auto-indent
:set smartindent ; Turn on intelligent auto-indent
:set shiftwidth=4 ; Defines 4 spaces as indent size
ctrl-t, ctrl-d ; Indent/un-indent in insert mode
>> ; Indent
<< ; Un-indent

// Syntax highlighting
:syntax on ; Turn on syntax highlighting
:syntax off ; Turn off syntax highlighting
:set syntax=perl ; Force syntax highlighting

// Selection
gv ; Repeat last selection, reselect previous selection




// NERDTree
o, <CR> ; Open files, directories and bookmarks
go ; Open selected file, but leave cursor in the NERDTree
t ; Open selected node/bookmark in a new tab
T ; Same as 't' but keep the focus on the current tab
i ; Open selected file in a split window
gi ; Same as i, but leave the cursor on the NERDTree
s ; Open selected file in a new vsplit
gs ; Same as s, but leave the cursor on the NERDTree
O ; Recursively open the selected directory
x ; Close the current nodes parent
X ; Recursively close all children of the current node
e ; Edit the current dir
D ; Delete the current bookmark
P ; Jump to the root node
p ; Jump to current nodes parent
K ; Jump up inside directories at the current tree depth
J ; Jump down inside directories at the current tree depth
<C-J> ; Jump down to the next sibling of the current directory
<C-K> ; Jump up to the previous sibling of the current directory
C ; Change the tree root to the selected dir
u ; Move the tree root up one directory
U ; Same as 'u' except the old root node is left open
r ; Recursively refresh the current directory
R ; Recursively refresh the current root
m ; Display the NERD tree menu
cd ; Change the CWD to the dir of the selected node
CD ; Change tree root to the CWD
I ; Toggle whether hidden files displayed
f ; Toggle whether the file filters are used
F ; Toggle whether files are displayed
B ; Toggle whether the bookmark table is displayed
q ; Close the NERDTree window
A ; Zoom (maximize/minimize) the NERDTree window
? ; Toggle the display of the quick help

// VIM_SURROUND
// [Normal mode]
ds   ; delete a surrounding
cs   ; change a surrounding
ys   ; add a surrounding
yS   ; add a surrounding and place the surrounded text on a new line + indent it
yss  ; add a surrounding to the whole line
ySs  ; add a surrounding to the whole line, place it on a new line + indent it
ySS  ; same as ySs

// [Visual mode]
s ; in visual mode, add a surrounding
S ; in visual mode, add a surrounding but place text on new line + indent it

// [Insert mode]
<CTRL-s><CTRL-g>s ; in insert mode, add a surrounding
<CTRL-s><CTRL-s> OR <CTRL-g>S ; in insert mode, add a new line + surrounding + indent

//Session man
:SessionOpen ; command takes a session name as an argument.  It supports argument completion.
:SessionOpenLast command opens the g:LAST_SESSION session (see above).
:SessionClose command wipes out all buffers, kills cscope and clears variables with session name.
:SessionSave command saves the current editing session.  If v:this_session is empty it asks for a session name.
:SessionSaveAs command takes a session name as an optional argument.  If there is no argument or it is empty, it asks for a session name (default is the last part of v:this_session).
:SessionShowLast command shows the content of the g:LAST_SESSION and v:this_session variables.

// vim-notes
:Note ; command to create a new buffer and load the appropriate file type and syntax
:Note ;edit a note containing anything in its title (if no notes are found a new one is created with its title set to anything)
:DeleteNote ; command enables you to delete the current note
:SearchNotes ; keyword searches for keywords and :SearchNotes /pattern/ searches for regular expressions
:RecentNotes ; command lists your notes by modification date, starting
  with the most recently edited note

// NERD Commenter
<leader>cc  ; Comment out the current line or text selected in visual mode.
<leader>cn  ; Same as <leader>cc but forces nesting.
<leader>c  ; Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa.
<leader>cm  ; Comments the given lines using only one set of multipart delimiters.
<leader>ci  ; Toggles the comment state of the selected line(s) individually.
<leader>cs  ; Comments out the selected lines ``sexily''
<leader>cy  ; Same as <leader>cc except that the commented line(s) are yanked first.
<leader>c$  ; Comments the current line from the cursor to the end of line.
<leader>cA  ; Adds comment delimiters to the end of line and goes into insert mode between them.
 ; Adds comment delimiters at the current cursor position and inserts between. Disabled by default.
<leader>ca  ; Switches to the alternative set of delimiters.
<leader>cl | [count]<leader>cb  ; Same as  except that the delimiters are aligned down the left side (<leader>cl) or both sides (<leader>cb).
<leader>cu ; Uncomments the selected line(s).

// VIM - Fuggitive - GIT in VIM
:Git [args] ; Run an arbitrary git command. Similar to :!git [args] but chdir to the repository tree first.
:Git! [args] ; Like |:Git|, but capture the output into a temp file, and edit that temp file.
:Gcd [directory] ; |:cd| relative to the repository.
:Glcd [directory] ; |:lcd| relative to the repository.
:Gstatus                Bring up the output of git-status in the preview window.  The following maps, which work on the cursor line file where sensible, are provided:
:Gcommit [args] ; A wrapper around git-commit.  If there is nothing to commit, |:Gstatus| is called instead.  Unless the arguments given would skip the invocation of an editor (e.g., -m), a split window will be used to obtain a commit message.  Write and close that window (:wq or |:Gwrite|) to finish the commit.  Unlike when running the actual git-commit command, it is possible (but unadvisable) to muck with the index with commands like git-add and git-reset while a commit message is pending.
:Ggrep [args] ; |:grep| with git-grep as 'grepprg'.
:Glgrep [args] ; |:lgrep| with git-grep as 'grepprg'.
:Glog [args] ; Load all previous revisions of the current file into the quickfix list.  Additional git-log arguments can be given (for example, --reverse).  If "--" appears as an argument, no file specific filtering is done, and previous commits rather than previous file revisions are loaded.
:Gllog [args] ; Like |:Glog|, but use the location list instead of the quickfix list.
:Gedit [revision] ; |:edit| a |fugitive-revision|.
:Gsplit [revision] ; |:split| a |fugitive-revision|.
:Gvsplit [revision] ; |:vsplit| a |fugitive-revision|.
:Gtabedit [revision] ; |:tabedit| a |fugitive-revision|.
:Gpedit [revision] ; |:pedit| a |fugitive-revision|.
:Gsplit! [args] ; *fugitive-:Gsplit!* *fugitive-:Gvsplit!*
:Gvsplit! [args] ; *fugitive-:Gtabedit!* *fugitive-:Gpedit!*
:Gtabedit! [args] ; Like |:Git!|, but open the resulting temp file in a
:Gpedit! [args] ; split, tab, or preview window.
:Gread [revision] ; Empty the buffer and |:read| a |fugitive-revision|.  When the argument is omitted, this is similar to git-checkout on a work tree file or git-add on a stage file, but without writing anything to disk.
:{range}Gread [revision]; |:read| in a |fugitive-revision| after {range}.
:Gread! [args] ; Empty the buffer and |:read| the output of a Git command.  For example, :Gread! show HEAD:%.
:{range}Gread! [args] ; |:read| the output of a Git command after {range}.
:Gwrite ; Write to the current file's path and stage the results.  When run in a work tree file, it is effectively git add.  Elsewhere, it is effectively git-checkout.  A great deal of effort is expended to behave sensibly when the work tree or index version of the file is open in another buffer.
:Gwrite {path} ; You can give |:Gwrite| an explicit path of where in the work tree to write.  You can also give a path like :0:foo.txt or even :0 to write to just that stage in the index.
:Gwq [path] ; Like |:Gwrite| followed by |:quit| if the write succeeded.
:Gwq! [path] ; Like |:Gwrite|! followed by |:quit|! if the write succeeded.
:Gdiff [revision] ; Perform a |vimdiff| against the current file in the given revision.  With no argument, the version in the index is used (which means a three-way diff during a merge conflict, making it a git-mergetool alternative).  The newer of the two files is placed to the right.  Use |do| and |dp| and write to the index file to simulate "git add --patch".
:Gsdiff [revision] ; Like |:Gdiff|, but split horizontally.
:Gvdiff [revision] ; Identical to |:Gdiff|.  For symmetry with |:Gsdiff|.
:Gmove {destination} ; Wrapper around git-mv that renames the buffer afterward.  The destination is relative to the current directory except when started with a /, in which case it is relative to the work tree.  Add a ! to pass -f.
:Gremove ; Wrapper around git-rm that deletes the buffer afterward.  When invoked in an index file, --cached is passed.  Add a ! to pass -f and forcefully discard the buffer.
:Gblame [flags] ; Run git-blame on the file and open the results in a scroll bound vertical split.  Press enter on a line to reblame the file as it was in that commit.  You can give any of ltfnsewMC as flags and they will be passed along to git-blame.  The following maps, which work on the cursor line commit where sensible, are provided:
:[range]Gblame [flags] ; Run git-blame on the given range.
:[range]Gbrowse ; If the remote for the current branch is on GitHub, open the current file, blob, tree, commit, or tag (with git-web--browse) on GitHub.  Otherwise, open the current file, blob, tree, commit, or tag in git-instaweb (if you have issues, verify you can run "git instaweb" from a terminal).  If a range is given, it is appropriately appended to the URL as an anchor.
:[range]Gbrowse! ; Like :Gbrowse, but put the URL on the clipboard rather than opening it.
:[range]Gbrowse {revision} ; Like :Gbrowse, but for a given |fugitive-revision|.  A useful value here is -, which ties the URL to the latest commit rather than a volatile branch.
:[range]Gbrowse [...]@{remote} ; Force using the given remote rather than the remote for the current branch.  The remote is used to determine which GitHub repository to link to.
